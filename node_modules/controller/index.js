var bcrypt = require('bcrypt-nodejs');
var User = require('../../models/user.js');
var Unit = require('../../models/unit.js');

var Controller = function() {};


Controller.prototype.register = function (req,res){
    //Grab all the units to populate dropdown

    var Units = Unit.find(function(err,results){
    if (err) return console.log(err);
    console.log("results are "+results);
  
    res.render('register',results);
  
    });


   
}

Controller.prototype.registration = function(req,res){

  if (!req.body) return res.sendStatus(400)
    //parse the request body and assign it to the new User object of type USER schema (imported above)
    var newUser = JSON.parse(JSON.stringify(req.body));
    console.log("firstName is" + newUser.firstName);
    console.log("newUser var is "+ newUser);

    //Hash the password
    var hashedPW = bcrypt.hashSync(newUser.password);


    var dbEnter = new User({emailAddress: newUser.emailAddress,passwordHash: hashedPW, firstName: newUser.firstName, lastName: newUser.lastName });
    //DEBUG
    console.log("the dbEnter obj is "+dbEnter);
    
    //Insert that user into the database
    dbEnter.save(function (err, dbEnter){
        if(err) return console.error(err);
        console.log("has been added to db.")
    })

    var postRegData = new Object({firstName: dbEnter.firstName, emailAddress: dbEnter.emailAddress});
    //send user to postRegistration informing them to check email soon.
    res.render('postRegistration', {title: 'Registration Complete!', data: postRegData});
}

Controller.prototype.login = function(req,res){
	if (!req.body) return res.sendStatus(400)
    console.log("SESSION POST INVOKED!");
console.log("Session request is "+JSON.stringify(req.body));

var userObject = JSON.parse(JSON.stringify(req.body));
console.log("User Object is "+userObject);
console.log("User Object email is "+userObject.emailAddress);

//compare the entered password against hashed password.
    //First get the user record belonging to the user.

    
   User.findOne({emailAddress: userObject.emailAddress}, function(err,results){
        if(err|| results == null){
            res.render('login',{title: 'Login', errorMessage: "That email or password does not exist in our datbase. Please enter a proper account."})
        }

        console.log(results);
        //Insert into cookie what the guy's userName is
        //console.log("INITIAL COOKIE");
        //console.log(req.cookies);
        //console.log("INITIAL COOKIE SIGNED?");
        //console.log(req.signedCookies['auth']);


        if(bcrypt.compareSync(userObject.password,results.passwordHash)){
            //if the password is correct. SIGN THE COOKIE. Redirect to welcome
            console.log("PW AUTH SUCCESS");
            res.cookie('auth','pass', {signed: true});
            //put user's ID into cookie so object can be found easily later.
            res.cookie('userID',results._id, {signed: true});
            //send to welcome page.
             res.render('welcome', {  title: 'Welcome Page', data: results});



        }
        else{
            //if the password does not match. DO NOT sign the cookie. Redirect to login.
            console.log("PW AUTH FAIL");
            res.render('login',{title: 'Login', errorMessage: "That email or password does not exist in our datbase. Please enter a proper account."})

        }

       
    });
}

Controller.prototype.logout = function(req,res){
	//delete cookies
	res.clearCookie('auth', {path: '/admin'});
	res.clearCookie('userID', {path: '/admin'});
	console.log("cookies cleared");
	//render the homepage esse
	
	//this.render(req,"index",null,res);
	res.render("index",{userData: null});
}

Controller.prototype.render = function(req,view,content,res){
console.log("controller render invoked");
//If there are cookies present
//1. Check the cookies:
	if(req.signedCookies.userID){
		console.log(req.signedCookies);
		//if a cookie exists, that means they are logged in.
		//If a USER ID also exists ,that means that they are a valid user.
		
		User.findOne({_id: req.signedCookies.userID}, function(err,results){
			if(err) return console.log(err);
			//if "CONTENT" is not empty, add to it
				if (content != null){
					content.userData = results;
				
			}

			else {
				var content = {};
				console.log(content);
				content.userData = results;
				console.log("empty, content is now "+JSON.stringify(content));
			}
			
			res.render(view,content);
			console.log("rendering view: "+view+"with content: "+content);
		});
	}
	//else no cookies, just do a render
	else {
		res.render(view, content);
	}



//res.render(view,content);

//on the view, change them so that if there is a USER object, then render the 
//logoutpanel
}

module.exports = new Controller();